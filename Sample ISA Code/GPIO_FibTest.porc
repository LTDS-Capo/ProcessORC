//                                                                            //
    //  Clock Conf Addr = 384-391
    //                  >  [13:0] - clk division (4x)
    //                  > [15:16] - clk source (4x)
    //       Timer Addr = 392-395
    //                  > [26:0] Wait time
    //                  >   [27] PreScaler
    //                      > - 0 : 1x
    //                      > - 1 : 32x
    //                  > [30:28] Timer Select
    //                  >    [31] Command
    //                      > - 0 : Clear(Store)/Check(Load)
    //                      > - 1 : Set(Store)/Wait(Load)
    // GPIO MemMap Addr = 396-397 (Can upgrade with more commands if I check Load/Store)
    //                  > Pulse of Length 0 Selects clock.
    //                  > GPIO - In, Out, OutEn
    //                  >>> NonPulse
    //                      > [15:13] IOAddr
    //                      > [12:10] Command
    //                          > - 0 : WriteBit
    //                          > - 1 : WriteByte
    //                          > - 2 : ClearBit
    //                          > - 3 : ReadStatus
    //                          > - 4 : ReadPin
    //                          > - 5 : ReadStatusByte
    //                          > - 6 : ReadPinByte
    //                          > - 7 : PulseBit         // Used if Pulse Length != 0
    //                          > - 7 : Configure Clocks // Used if Pulse Length == 0
    //                          >   [9:8] *Ignore*
    //                          >   [7:1] WriteByteValue/*Ignore*
    //                          >     [0] WriteByteValue/WriteBitValue/*Ignore*
    //                  >>> Pulse
    //                      > [15:13] IOAddr
    //                      > [12:10] Command - 3'h7
    //                      >   [9:0] PulseLength - NOT 10'h000
    //                  >>> Configure Clocks
    //                      > [15:13] Clock Select
    //                      > [12:10] Command - 3'h7
    //                      >   [9:0] PulseLength - 10'h000
//                                                                            //
// Registers
    // r0 - ZR
    // r1 - Timer Base Address
    // r2 - Timer Command Byte [1:0]
    // r3 - Timer Command Byte [3:2]
    // r4 - GPIO Write Value - Destructive
    // r5 - GPIO Base Address
    // r6 - GPIO Command
    // r7 - GPIO Data Mask
    // r8 - Reset Condition Check
    // r9 - Step Counter
    // rA - Fib Value 0
    // rB - Fib Value 1
    // rC - Fib Working Register
    // rD - 
    // rE - 
    // rF - *Return Pointer*
//                                                                            //

:FUNCTION: GPIO_FibTest
    :PARAMETERS:
        GPIO_IO_BASE = 'd396
        TIMER_IO_BASE = 'd392
    :ENDPARAMETERS:

    :ALIAS:

    :ENDALIAS:

    :DATA:
        // Do Not Need Data
    :ENDDATA:

    :INSTRUCTIONS:
        // Timer Prep
        LEI r1 'd392 // 16'hD188 - Load Timer Base Address
        LLI r2 'h20  // 16'hC220 - Load Timer Command Byte 0 [Timer waits 14,999,840 cycles]
        LUI r2 'h00  // 16'hE2E1 - Load Timer Command Byte 1
        LLI r3 'h00  // 16'hC3E4 - Load Timer Command Byte 2
        LUI r3 'h80  // 16'hE380 - Load Timer Command Byte 3
        STW r2 r1    // 16'h3251 - Store Timer Command Lower [14,999,840 cycles]
        INC r1 r1    // 16'h0111 - Increment Timer Pointer
        INC r1 r1    // 16'h0111 - Increment Timer Pointer
        // GPIO Prep
        LEI r5 'd396 // 16'hD58C - GPIO Base Address
        LLI r6 'h00  // 16'hC600 - GPIO Write Byte Addr:0, Value 'hA6 [0000_01_00_00000000]
        LUI r6 'h04  // 16'hE604 - GPIO Write Byte Addr:0, Value 'hA6 [0000_01_00_00000000]
        LLI r7 'hFF  // 16'hC7FF - GPIO Data Mask
        // Fib Prep
        LLI rA 'h1   // 16'hCA01 - Preload Initial Fib Values
        LLI rB 'h0   // 16'hCB00 - Preload Initial Fib Values
        MOV r9 r0    // 16'h0970 - Clear r9
        // Main Loop
        MOV rC rA    // 16'h0C7A - Flip the fib values
        MOV rA rB    // 16'h0A7B - Flip the fib values
        :LOOP_START
        MOV rB rC    // 16'h0B7C - Flip the fib values
        MOV r4 rA    // 16'h047A - Copy Current Fib to GPIO Write Value
        JLI r0 []    // 16'h90 - Jump and Link to "WRITE_AND_WAIT"
        ADD rA rB    // 16'h0A0B - Perform Fib
        INC r9 r9    // 16'h0919 - Increment Step Counter
        MOV r4 r9    // 16'h0479- Copy Step Counter to GPIO Write Value
        JLI r0 []    // 16'h90 - Jump and Link to "WRITE_AND_WAIT"
        MOV rC rA    // 16'h0C7A - Flip the fib values
        BZI r0 []    // 16'hB0 - Jump to "LOOP_START"
        MOV rA rB    // 16'h0A7B - Flip the fib values
        // GPIO Write and Wait
        :WRITE_AND_WAIT
        AND r4 r7    // 16'h0447 - Mask Write Data
        IOR r4 r6    // 16'h0466 - Append Command
        STW r4 r5    // 16'h3455 - Submit GPIO Write
        STW r3 r1    // 16'h3351 - Store Timer Command Upper [Timer Set]
        LDW r4 r1    // 16'h3411 - Load Timer Command Upper [Timer Wait]
        MOV r0 r4    // 16'h0074 - Wait for r4 to clear
        RET          // 16'hA00F - Jump back to Line X [negative Y] 
    :ENDINSTRUCTIONS:
:ENDFUNCTION:
