{"id":1,"parentId":-1,"label":"snippets","lastId":10,"children":[{"id":2,"parentId":1,"label":"sv Comment Block","value":"// COMMENT_BLOCK\n// Notes:\n// In:\n// Out:\n\n//","children":[],"resolveSyntax":true},{"id":3,"parentId":1,"label":"RTL Block Multibit sync_rst","value":"reg  [:0] Reg;\nwire       Trigger = (SOMETHING && clk_en) || sync_rst;\nwire [:0] Next = (sync_rst) ? 0 : SOMETHING;\nalways_ff @(posedge clk) begin\n    if (Trigger) begin\n        Reg <= Next;\n    end\nend","children":[],"resolveSyntax":true},{"id":5,"parentId":1,"label":"RTL Block Multibit async_rst","value":"reg  [:0] Reg;\nwire       Trigger = SOMETHING && clk_en;\nwire [:0] Next = SOMETHING;\nalways_ff @(posedge clk or posedge async_rst) begin\n    if (async_rst) begin\n        Reg <= 0;\n    end\n    else if (Trigger) begin\n        Reg <= Next;\n    end\nend","children":[],"resolveSyntax":true},{"id":9,"parentId":1,"label":"RTL Block Multibit sync_rst Muxed","value":"reg   [:0] Reg;\nwire        Trigger = (SOMETHING && clk_en) || sync_rst;\nlogic [:0] Next;\nwire  [1:0] NextRegCondition;\nassign NextRegCondition[0] = (SOMETHING) && ~sync_rst;\nassign NextRegCondition[1] = (SOMETHING) && ~sync_rst;\nalways_comb begin : NextRegMux\n    case (NextRegCondition)\n        2'b01  : Next = SOMETHING;\n        2'b10  : Next = SOMETHING;\n        2'b11  : Next = SOMETHING;\n        default: Next = 0; // Default is also case 0\n    endcase\nend\nalways_ff @(posedge clk) begin\n    if (Trigger) begin\n        Reg <= Next;\n    end\nend","children":[],"resolveSyntax":true},{"id":10,"parentId":1,"label":"RTL Block Multibit async_rst Muxed","value":"reg   [:0] Reg;\nwire        Trigger = SOMETHING && clk_en;\nlogic [:0] Next;\nwire  [1:0] NextRegCondition;\nassign NextRegCondition[0] = SOMETHING;\nassign NextRegCondition[1] = SOMETHING;\nalways_comb begin : NextRegMux\n    case (NextRegCondition)\n        2'b01  : Next = SOMETHING;\n        2'b10  : Next = SOMETHING;\n        2'b11  : Next = SOMETHING;\n        default: Next = SOMETHING; // Default is also case 0\n    endcase\nend\nalways_ff @(posedge clk or posedge async_rst) begin\n    if (async_rst) begin\n        Reg <= 0;\n    end\n    else if (Trigger) begin\n        Reg <= Next;\n    end\nend","children":[],"resolveSyntax":true},{"id":4,"parentId":1,"label":"RTL Block Singlebit sync_rst","value":"reg  Reg;\nwire Trigger = (SOMETHING && clk_en) || sync_rst;\nwire Next = SOMETHING && ~sync_rst;\nalways_ff @(posedge clk) begin\n    if (Trigger) begin\n        Reg <= Next;\n    end\nend","children":[],"resolveSyntax":true},{"id":6,"parentId":1,"label":"RTL Block Singlebit async_rst","value":"reg  Reg;\nwire Trigger = SOMETHING && clk_en;\nwire Next = SOMETHING;\nalways_ff @(posedge clk or posedge async_rst) begin\n    if (async_rst) begin\n        Reg <= 0;\n    end\n    else if (Trigger) begin\n        Reg <= Next;\n    end\nend","children":[],"resolveSyntax":true}]}